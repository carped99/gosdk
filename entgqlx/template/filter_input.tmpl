{{ define "gql_filter_input" }}

{{- /*gotype: entgo.io/ent/entc/gen.Graph*/ -}}

{{ $pkg := base $.Config.Package }}
{{- with extend $ "Package" $pkg }}
        {{ template "header" . }}
{{- end }}


{{ $gqlNodes := filterNodes $.Nodes (skipMode "where_input") }}

import (
    "{{ $.Config.Package }}/predicate"
	{{- range $n := $gqlNodes }}
        {{- template "import/types" $n }}
		"{{ $.Config.Package }}/{{ $n.Package }}"
	{{- end }}
)
{{ template "import" $ }}

{{ range $n := $gqlNodes }}
    {{/* 필드 목록 을 가져옵니다. */}}
    {{ $comparableFields := list $n.ID }}
    {{ $names := nodePaginationNames $n }}
    {{ with $annotation := $n.ID.Annotations.EntGQL }}
        {{ if isSkipMode $annotation.Skip "where_input" }}
            {{ $comparableFields = list }}
        {{ end }}
    {{ end }}
    {{ range $f := filterFields $n.Fields (skipMode "where_input") }}
        {{ if $f.Type.Comparable }}
            {{ $comparableFields = append $comparableFields $f }}
        {{ end }}
    {{ end }}

    {{/* 이름 */}}
    {{ $name := $names.Node }}

    {{- range $f := $comparableFields }}
        {{ $filter := print $name $f.StructField "FilterInput" }}

        // {{ $filter }} represents a filter input for filtering {{ $n.Name }} queries.
        type {{ $filter }} struct {
            {{- range $op := $f.Ops }}
                {{- $field := print $f.StructField $op.Name }}
                {{- $jsonTag := print $op.Name }}
                {{- $type := $f.Type }}
                {{- if $op.Niladic }}
                    {{- $type = "bool" }}
                {{- else if $op.Variadic }}
                    {{- $type = print "[]" $type }}
                {{- else if not $f.Type.RType.IsPtr }}
                    {{- $type = print "*" $type }}
                {{- end }}
                {{ $op.Name }} {{ $type }} `json:"{{ $jsonTag }},omitempty"`
            {{- end }}
        }

        // {{ $filter }} represents a filter input for filtering {{ $n.Name }} queries.
        func (i *{{ $filter }}) P() predicate.{{ $n.Name }} {
            var predicates []predicate.{{ $n.Name }}

            {{- range $op := $f.Ops }}
                {{- $func := print $f.StructField $op.Name }}
                {{- $field := $op.Name }}
                {{- if $op.Niladic }}
                    if i.{{ $field }} {
                        predicates = append(predicates, {{ $n.Package }}.{{ $func }}())
                    }
                {{- else if $op.Variadic }}
                    if len(i.{{ $field }}) > 0 {
                        predicates = append(predicates, {{ $n.Package }}.{{ $func }}(i.{{ $field }}...))
                    }
                {{- else }}
                    if i.{{ $field }} != nil {
                        predicates = append(predicates, {{ $n.Package }}.{{ $func }}({{ if not $f.Type.RType.IsPtr }}*{{ end }}i.{{ $field }}))
                    }
                {{- end }}
            {{- end }}

            switch len(predicates) {
            case 0:
                return nil
            case 1:
                return predicates[0]
            default:
                return {{ $n.Package }}.And(predicates...)
            }
        }
    {{- end }}

    {{ $input := print $name "FilterInput" }}
    // {{ $input }} represents a where input for filtering {{ $n.Name }} queries.
    type {{ $input }} struct {
        Predicates []predicate.{{ $n.Name }} `json:"-"`
        Not *{{ $input }} `json:"not,omitempty"`
        Or  []*{{ $input }} `json:"or,omitempty"`
        And []*{{ $input }} `json:"and,omitempty"`

        // Field predicates.
        {{- range $f := $comparableFields }}
            {{ $filter := print $name $f.StructField "FilterInput" }}
            {{- $field := print $f.StructField }}
            {{- $field }} *{{ $filter }}
        {{- end }}

        {{ range $e := filterEdges $n.Edges (skipMode "where_input") }}
            // "{{ $e.Name }}" edge predicates.
            {{- $field := print "Has" $e.StructField }}
            {{- $jsonTag := print "has_" $e.Name }}
            {{ $field }} *bool `json:"{{ camel $jsonTag }},omitempty"`

            {{- $field = print $field "With" }}
            {{- $jsonTag = print $jsonTag "_with" }}
            {{- $names := nodePaginationNames $e.Type }}
            {{ $field }} []*{{ print $names.Node "FilterInput" }} `json:"{{ camel $jsonTag }},omitempty"`
        {{- end }}
    }

    // AddPredicates adds custom predicates to the where input to be used during the filtering phase.
    func (i *{{ $input }}) AddPredicates(predicates ...predicate.{{ $n.Name }}) {
        i.Predicates = append(i.Predicates, predicates...)
    }

    {{ $err := printf "ErrEmpty%s" $input }}

    // Filter applies the {{ $input }} filter on the {{ $n.QueryName }} builder.
    func (i *{{ $input }}) Filter(q *{{ $n.QueryName }}) (*{{ $n.QueryName }}, error) {
        if i == nil {
            return q, nil
        }
        p, err := i.P()
        if err != nil {
            {{- /* Skip errors only for top-level empty predicates. The rest are invalid. */}}
            if err == {{ $err }} {
               return q, nil
            }
            return nil, err
        }
        return q.Where(p), nil
    }

    // {{ $err }} is returned in case the {{ $input }} is empty.
    var {{ $err }} = errors.New("{{ base $.Config.Package }}: empty predicate {{ $input }}")

    // P returns a predicate for filtering {{ plural $n.Name | lower }}.
    // An error is returned if the input is empty or invalid.
    func (i *{{ $input }}) P() (predicate.{{ $n.Name }}, error) {
        var predicates []predicate.{{ $n.Name }}
        if i.Not != nil {
            p, err := i.Not.P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'not'", err)
            }
            predicates = append(predicates, {{ $n.Package }}.Not(p))
        }
        switch n := len(i.Or); {
        case n == 1:
            p, err := i.Or[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'or'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            or := make([]predicate.{{ $n.Name }}, 0, n)
            for _, w := range i.Or {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'or'", err)
                }
                or = append(or, p)
            }
            predicates = append(predicates, {{ $n.Package }}.Or(or...))
        }
        switch n := len(i.And); {
        case n == 1:
            p, err := i.And[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'and'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            and := make([]predicate.{{ $n.Name }}, 0, n)
            for _, w := range i.And {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'and'", err)
                }
                and = append(and, p)
            }
            predicates = append(predicates, {{ $n.Package }}.And(and...))
        }
        predicates = append(predicates, i.Predicates...)

        {{- range $f := $comparableFields }}
            {{- $field := $f.StructField }}
            if i.{{ $field }} != nil {
                predicates = append(predicates, i.{{ $field }}.P())
            }
        {{- end }}
        {{ range $e := filterEdges $n.Edges (skipMode "where_input") }}
            {{- $func := print "Has" $e.StructField }}
            if i.{{ $func }} != nil {
                p := {{ $n.Package }}.{{ $func }}()
                if !*i.{{ $func }} {
                    p = {{ $n.Package }}.Not(p)
                }
                predicates = append(predicates, p)
            }
            {{- $func = print $func "With" }}
            if len(i.{{ $func }}) > 0 {
                with := make([]predicate.{{ $e.Type.Name }}, 0, len(i.{{ $func }}))
                for _, w := range i.{{ $func }} {
                    p, err := w.P()
                    if err != nil {
                        return nil, fmt.Errorf("%w: field '{{ $func }}'", err)
                    }
                    with = append(with, p)
                }
                predicates = append(predicates, {{ $n.Package }}.{{ $func }}(with...))
            }
        {{- end }}
        switch len(predicates) {
        case 0:
            return nil, {{ $err }}
        case 1:
            return predicates[0], nil
        default:
            return {{ $n.Package }}.And(predicates...), nil
        }
    }
{{- end }}
{{ end }}
