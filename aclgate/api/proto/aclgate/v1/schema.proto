syntax = "proto3";

package aclgate.v1;

option go_package = "aclgate/api/aclgate/v1;aclgatev1";

import "buf/validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Subject (user, group, etc.)
message Subject {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Subject";
      description: "Entity that holds permissions (user, group, role, etc.)";
    };
  };
  
  string type = 1 [
    (buf.validate.field).string = {
      pattern : "^[^\\s]{1,254}$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Subject type (e.g., user, group, role, service)";
    }
  ];

  string id = 2 [
    (buf.validate.field).string = {
      pattern : "^[^\\s]{1,256}$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Subject identifier (UUID, email, username, etc.)";
    }
  ];
}

// Resource (file, database, API, etc.)
message Resource {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Resource";
      description: "Target resource for permission enforcement";
    };
  };
  
  string type = 1 [
    (buf.validate.field).string = {
      pattern : "^[^:#@\\s]{1,254}$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Resource type (e.g., document, database, api, file)";
    }
  ];

  string id = 2 [
    (buf.validate.field).string = {
      pattern : "^[^#:\\s]+$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Resource identifier (UUID, path, name, etc.)";
    }
  ];
}

// Relation (type of permission)
message Relation {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Relation";
      description: "Permission relation between subject and resource";
    };
  };
  
  string name = 1 [
    (buf.validate.field).string = {
      pattern : "^[^:#@\\s]{1,50}$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Permission relation name (e.g., can_read, can_write, can_delete, owner)";
    }
  ];
}

// Permission tuple (combination of subject, resource, and relation)
message Tuple {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Permission Tuple";
      description: "Definition of permission as a combination of subject, resource, and relation";
    };
  };
  
  Subject subject = 1 [
    (buf.validate.field).required = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Subject holding the permission";
      required: ["type", "id"];
    }
  ];
  
  Resource resource = 2 [
    (buf.validate.field).required = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Resource to which the permission applies";
      required: ["type", "id"];
    }
  ];
  
  Relation relation = 3 [
    (buf.validate.field).required = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Permission relation";
      required: ["name"];
    }
  ];
}

