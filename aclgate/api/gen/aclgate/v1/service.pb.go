// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aclgate/v1/service.proto

package aclgatev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Single permission check request
type CheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tuple         *Tuple                 `protobuf:"bytes,1,opt,name=tuple,proto3" json:"tuple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetTuple() *Tuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

// Single permission check response
type CheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowed       bool                   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *CheckResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Bulk permission check request
type BatchCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CheckRequest        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckRequest) Reset() {
	*x = BatchCheckRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckRequest) ProtoMessage() {}

func (x *BatchCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *BatchCheckRequest) GetItems() []*CheckRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

// Bulk permission check response
type BatchCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*BatchCheckResult    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckResponse) Reset() {
	*x = BatchCheckResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckResponse) ProtoMessage() {}

func (x *BatchCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCheckResponse) GetResults() []*BatchCheckResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Bulk permission check result item
type BatchCheckResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *CheckRequest          `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Allowed       bool                   `protobuf:"varint,2,opt,name=allowed,proto3" json:"allowed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckResult) Reset() {
	*x = BatchCheckResult{}
	mi := &file_aclgate_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckResult) ProtoMessage() {}

func (x *BatchCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckResult.ProtoReflect.Descriptor instead.
func (*BatchCheckResult) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCheckResult) GetRequest() *CheckRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BatchCheckResult) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

// Permission mutation request
type MutateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Writes        []*Tuple               `protobuf:"bytes,1,rep,name=writes,proto3" json:"writes,omitempty"`
	Deletes       []*Tuple               `protobuf:"bytes,2,rep,name=deletes,proto3" json:"deletes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutateRequest) Reset() {
	*x = MutateRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRequest) ProtoMessage() {}

func (x *MutateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRequest.ProtoReflect.Descriptor instead.
func (*MutateRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *MutateRequest) GetWrites() []*Tuple {
	if x != nil {
		return x.Writes
	}
	return nil
}

func (x *MutateRequest) GetDeletes() []*Tuple {
	if x != nil {
		return x.Deletes
	}
	return nil
}

// Permission mutation response
type MutateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutateResponse) Reset() {
	*x = MutateResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResponse) ProtoMessage() {}

func (x *MutateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResponse.ProtoReflect.Descriptor instead.
func (*MutateResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *MutateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Real-time permission check request
type StreamCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tuple         *Tuple                 `protobuf:"bytes,1,opt,name=tuple,proto3" json:"tuple,omitempty"`
	Context       map[string]string      `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCheckRequest) Reset() {
	*x = StreamCheckRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCheckRequest) ProtoMessage() {}

func (x *StreamCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCheckRequest.ProtoReflect.Descriptor instead.
func (*StreamCheckRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *StreamCheckRequest) GetTuple() *Tuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *StreamCheckRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// Real-time permission check response
type StreamCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowed       bool                   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCheckResponse) Reset() {
	*x = StreamCheckResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCheckResponse) ProtoMessage() {}

func (x *StreamCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCheckResponse.ProtoReflect.Descriptor instead.
func (*StreamCheckResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *StreamCheckResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *StreamCheckResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StreamCheckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Request for listing accessible resources
type ListResourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subject       *Subject               `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Relation      *Relation              `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesRequest) Reset() {
	*x = ListResourcesRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesRequest) ProtoMessage() {}

func (x *ListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListResourcesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListResourcesRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ListResourcesRequest) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

// Response for listing accessible resources
type ListResourcesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resources     []*Resource            `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesResponse) Reset() {
	*x = ListResourcesResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesResponse) ProtoMessage() {}

func (x *ListResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListResourcesResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListResourcesResponse) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Request for listing subjects with access
type ListSubjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Resource      *Resource              `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Relation      *Relation              `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubjectsRequest) Reset() {
	*x = ListSubjectsRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectsRequest) ProtoMessage() {}

func (x *ListSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectsRequest.ProtoReflect.Descriptor instead.
func (*ListSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListSubjectsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListSubjectsRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ListSubjectsRequest) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

// Response for listing subjects with access
type ListSubjectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subjects      []*Subject             `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubjectsResponse) Reset() {
	*x = ListSubjectsResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectsResponse) ProtoMessage() {}

func (x *ListSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectsResponse.ProtoReflect.Descriptor instead.
func (*ListSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListSubjectsResponse) GetSubjects() []*Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Request for querying audit logs
type AuditRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resource      *Resource              `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Subject       *Subject               `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Relation      *Relation              `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Cursor        string                 `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditRequest) Reset() {
	*x = AuditRequest{}
	mi := &file_aclgate_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRequest) ProtoMessage() {}

func (x *AuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRequest.ProtoReflect.Descriptor instead.
func (*AuditRequest) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *AuditRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AuditRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *AuditRequest) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *AuditRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AuditRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Audit log entry
type AuditLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Tuple         *Tuple                 `protobuf:"bytes,3,opt,name=tuple,proto3" json:"tuple,omitempty"`
	Actor         string                 `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	mi := &file_aclgate_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *AuditLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLog) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuditLog) GetTuple() *Tuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *AuditLog) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *AuditLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuditLog) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Response for audit log query
type AuditResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*AuditLog            `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditResponse) Reset() {
	*x = AuditResponse{}
	mi := &file_aclgate_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResponse) ProtoMessage() {}

func (x *AuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclgate_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResponse.ProtoReflect.Descriptor instead.
func (*AuditResponse) Descriptor() ([]byte, []int) {
	return file_aclgate_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *AuditResponse) GetLogs() []*AuditLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_aclgate_v1_service_proto protoreflect.FileDescriptor

const file_aclgate_v1_service_proto_rawDesc = "" +
	"\n" +
	"\x18aclgate/v1/service.proto\x12\n" +
	"aclgate.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x17aclgate/v1/schema.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xcf\x01\n" +
	"\fCheckRequest\x12m\n" +
	"\x05tuple\x18\x01 \x01(\v2\x11.aclgate.v1.TupleBD\x92A;2\x19Permission tuple to check\xd2\x01\asubject\xd2\x01\bresource\xd2\x01\brelation\xbaH\x03\xc8\x01\x01R\x05tuple:P\x92AM\n" +
	"K*\x1fSingle Permission Check Request2(Request for checking a single permission\"\xe6\x01\n" +
	"\rCheckResponse\x12@\n" +
	"\aallowed\x18\x01 \x01(\bB&\x92A#2!Whether the permission is grantedR\aallowed\x12G\n" +
	"\x06reason\x18\x02 \x01(\tB/\x92A,2*Explanation of the permission check resultR\x06reason:J\x92AG\n" +
	"E* Single Permission Check Response2!Result of single permission check\"\xd2\x01\n" +
	"\x11BatchCheckRequest\x12l\n" +
	"\x05items\x18\x01 \x03(\v2\x18.aclgate.v1.CheckRequestB<\x92A12)List of permission check requests (min 1)\xa0\x01d\xa8\x01\x01\xbaH\x05\x92\x01\x02\b\x01R\x05items:O\x92AL\n" +
	"J*\x1dBulk Permission Check Request2)Request for checking multiple permissions\"\xc9\x01\n" +
	"\x12BatchCheckResponse\x12e\n" +
	"\aresults\x18\x01 \x03(\v2\x1c.aclgate.v1.BatchCheckResultB-\x92A*2(Result for each permission check requestR\aresults:L\x92AI\n" +
	"G*\x1eBulk Permission Check Response2%Results of multiple permission checks\"\x84\x02\n" +
	"\x10BatchCheckResult\x12Z\n" +
	"\arequest\x18\x01 \x01(\v2\x18.aclgate.v1.CheckRequestB&\x92A#2!Original permission check requestR\arequest\x12@\n" +
	"\aallowed\x18\x02 \x01(\bB&\x92A#2!Whether the permission is grantedR\aallowed:R\x92AO\n" +
	"M*!Bulk Permission Check Result Item2(Result of an individual permission check\"\x85\x02\n" +
	"\rMutateRequest\x12N\n" +
	"\x06writes\x18\x01 \x03(\v2\x11.aclgate.v1.TupleB#\x92A 2\x1ePermissions to grant or updateR\x06writes\x12G\n" +
	"\adeletes\x18\x02 \x03(\v2\x11.aclgate.v1.TupleB\x1a\x92A\x172\x15Permissions to revokeR\adeletes:[\x92AX\n" +
	"V*\x1bPermission Mutation Request27Request for granting, updating, or revoking permissions\"\xa2\x01\n" +
	"\x0eMutateResponse\x12B\n" +
	"\asuccess\x18\x01 \x01(\bB(\x92A%2#Whether the mutation was successfulR\asuccess:L\x92AI\n" +
	"G*\x1cPermission Mutation Response2'Result of permission mutation operation\"\x96\x03\n" +
	"\x12StreamCheckRequest\x12m\n" +
	"\x05tuple\x18\x01 \x01(\v2\x11.aclgate.v1.TupleBD\x92A;2\x19Permission tuple to check\xd2\x01\asubject\xd2\x01\bresource\xd2\x01\brelation\xbaH\x03\xc8\x01\x01R\x05tuple\x12\x81\x01\n" +
	"\acontext\x18\x02 \x03(\v2+.aclgate.v1.StreamCheckRequest.ContextEntryB:\x92A725Additional context information (IP, User-Agent, etc.)R\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:Q\x92AN\n" +
	"L*\"Real-time Permission Check Request2&Request for real-time permission check\"\xa5\x02\n" +
	"\x13StreamCheckResponse\x12@\n" +
	"\aallowed\x18\x01 \x01(\bB&\x92A#2!Whether the permission is grantedR\aallowed\x12G\n" +
	"\x06reason\x18\x02 \x01(\tB/\x92A,2*Explanation of the permission check resultR\x06reason\x121\n" +
	"\x05error\x18\x03 \x01(\tB\x1b\x92A\x182\x16Error message (if any)R\x05error:P\x92AM\n" +
	"K*#Real-time Permission Check Response2$Result of real-time permission check\"\xf9\x02\n" +
	"\x14ListResourcesRequest\x12U\n" +
	"\x04type\x18\x01 \x01(\tBA\x92A&2$Type of resource to query (optional)\xbaH\x15r\x132\x11^[^:#@\\s]{1,254}$R\x04type\x12V\n" +
	"\asubject\x18\x02 \x01(\v2\x13.aclgate.v1.SubjectB'\x92A\x1e2\x10Subject to query\xd2\x01\x04type\xd2\x01\x02id\xbaH\x03\xc8\x01\x01R\asubject\x12`\n" +
	"\brelation\x18\x03 \x01(\v2\x14.aclgate.v1.RelationB.\x92A%2\x1cPermission relation to query\xd2\x01\x04name\xbaH\x03\xc8\x01\x01R\brelation:P\x92AM\n" +
	"K*\x16List Resources Request21Request to list resources accessible by a subject\"\xbb\x01\n" +
	"\x15ListResourcesResponse\x12U\n" +
	"\tresources\x18\x01 \x03(\v2\x14.aclgate.v1.ResourceB!\x92A\x1e2\x1cList of accessible resourcesR\tresources:K\x92AH\n" +
	"F*\x17List Resources Response2+List of resources accessible by the subject\"\xff\x02\n" +
	"\x13ListSubjectsRequest\x12T\n" +
	"\x04type\x18\x01 \x01(\tB@\x92A%2#Type of subject to query (optional)\xbaH\x15r\x132\x11^[^:#@\\s]{1,254}$R\x04type\x12Z\n" +
	"\bresource\x18\x02 \x01(\v2\x14.aclgate.v1.ResourceB(\x92A\x1f2\x11Resource to query\xd2\x01\x04type\xd2\x01\x02id\xbaH\x03\xc8\x01\x01R\bresource\x12`\n" +
	"\brelation\x18\x03 \x01(\v2\x14.aclgate.v1.RelationB.\x92A%2\x1cPermission relation to query\xd2\x01\x04name\xbaH\x03\xc8\x01\x01R\brelation:T\x92AQ\n" +
	"O*\x15List Subjects Request26Request to list subjects who have access to a resource\"\xbb\x01\n" +
	"\x14ListSubjectsResponse\x12R\n" +
	"\bsubjects\x18\x01 \x03(\v2\x13.aclgate.v1.SubjectB!\x92A\x1e2\x1cList of subjects with accessR\bsubjects:O\x92AL\n" +
	"J*\x16List Subjects Response20List of subjects who have access to the resource\"\xe7\x03\n" +
	"\fAuditRequest\x12S\n" +
	"\bresource\x18\x01 \x01(\v2\x14.aclgate.v1.ResourceB!\x92A\x1e2\x1cResource to query (optional)R\bresource\x12O\n" +
	"\asubject\x18\x02 \x01(\v2\x13.aclgate.v1.SubjectB \x92A\x1d2\x1bSubject to query (optional)R\asubject\x12^\n" +
	"\brelation\x18\x03 \x01(\v2\x14.aclgate.v1.RelationB,\x92A)2'Permission relation to query (optional)R\brelation\x12U\n" +
	"\bpageSize\x18\x04 \x01(\x05B9\x92A62\"Page size (default: 20, max: 1000)Y\x00\x00\x00\x00\x00@\x8f@i\x00\x00\x00\x00\x00\x00\xf0?R\bpageSize\x12.\n" +
	"\x06cursor\x18\x05 \x01(\tB\x16\x92A\x132\x11Pagination cursorR\x06cursor:J\x92AG\n" +
	"E*\x17Audit Log Query Request2*Request to query permission change history\"\xff\x03\n" +
	"\bAuditLog\x12>\n" +
	"\x02id\x18\x01 \x01(\tB.\x92A+2)Unique identifier for the audit log entryR\x02id\x12K\n" +
	"\x06action\x18\x02 \x01(\tB3\x92A02.Action performed (WRITE, DELETE, UPDATE, etc.)R\x06action\x12O\n" +
	"\x05tuple\x18\x03 \x01(\v2\x11.aclgate.v1.TupleB&\x92A#2!Permission tuple that was changedR\x05tuple\x12;\n" +
	"\x05actor\x18\x04 \x01(\tB%\x92A\"2 Subject who performed the changeR\x05actor\x12\\\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\"\x92A\x1f2\x1dTime of the permission changeR\ttimestamp\x12=\n" +
	"\x06reason\x18\x06 \x01(\tB%\x92A\"2 Reason for the permission changeR\x06reason:;\x92A8\n" +
	"6*\x0fAudit Log Entry2#Entry for permission change history\"\x95\x01\n" +
	"\rAuditResponse\x12H\n" +
	"\x04logs\x18\x01 \x03(\v2\x14.aclgate.v1.AuditLogB\x1e\x92A\x1b2\x19List of audit log entriesR\x04logs::\x92A7\n" +
	"5*\x18Audit Log Query Response2\x19List of audit log entries2\xac\"\n" +
	"\x0eAclGateService\x12\xbf\x04\n" +
	"\x05Check\x12\x18.aclgate.v1.CheckRequest\x1a\x19.aclgate.v1.CheckResponse\"\x80\x04\x92A\xe6\x03\n" +
	"\x15Permission Management\x12\x17Single permission check\x1a\xeb\x02Checks if a specific subject has a specific permission on a resource.\n" +
	"\n" +
	"## Example\n" +
	"```\n" +
	"GET /acls/v1/check?tuple.subject.type=user&tuple.subject.id=user123&tuple.resource.type=document&tuple.resource.id=doc123&tuple.relation.name=can_read\n" +
	"```\n" +
	"\n" +
	"## Response Example\n" +
	"```json\n" +
	"{\n" +
	"  \"allowed\": true,\n" +
	"  \"reason\": \"User user123 has read permission on document doc123.\"\n" +
	"}\n" +
	"```JF\n" +
	"\x03200\x12?\n" +
	"\x1aPermission check succeeded\x12!\n" +
	"\x1f\x1a\x1d#/definitions/v1CheckResponse\x82\xd3\xe4\x93\x02\x10\x12\x0e/acls/v1/check\x12\xfa\x05\n" +
	"\n" +
	"BatchCheck\x12\x1d.aclgate.v1.BatchCheckRequest\x1a\x1e.aclgate.v1.BatchCheckResponse\"\xac\x05\x92A\x8f\x05\n" +
	"\x15Permission Management\x12\x15Bulk permission check\x1a\x8c\x04Checks multiple permissions in a single request. Useful for batch operations.\n" +
	"\n" +
	"## Example\n" +
	"```json\n" +
	"POST /acls/v1/batch\n" +
	"{\n" +
	"  \"items\": [\n" +
	"    {\n" +
	"      \"tuple\": {\n" +
	"        \"subject\": {\"type\": \"user\", \"id\": \"user123\"},\n" +
	"        \"resource\": {\"type\": \"document\", \"id\": \"doc123\"},\n" +
	"        \"relation\": {\"name\": \"can_read\"}\n" +
	"      }\n" +
	"    },\n" +
	"    {\n" +
	"      \"tuple\": {\n" +
	"        \"subject\": {\"type\": \"user\", \"id\": \"user123\"},\n" +
	"        \"resource\": {\"type\": \"document\", \"id\": \"doc456\"},\n" +
	"        \"relation\": {\"name\": \"can_write\"}\n" +
	"      }\n" +
	"    }\n" +
	"  ]\n" +
	"}\n" +
	"```JP\n" +
	"\x03200\x12I\n" +
	"\x1fBulk permission check succeeded\x12&\n" +
	"$\x1a\"#/definitions/v1BatchCheckResponse\x82\xd3\xe4\x93\x02\x13:\x01*\"\x0e/acls/v1/batch\x12\x83\x06\n" +
	"\x06Mutate\x12\x19.aclgate.v1.MutateRequest\x1a\x1a.aclgate.v1.MutateResponse\"\xc1\x05\x92A\xa3\x05\n" +
	"\x15Permission Management\x12\"Permission mutation (grant/revoke)\x1a\x99\x04Grants, updates, or revokes permissions. Permissions in the 'writes' array are granted/updated, and those in 'deletes' are revoked.\n" +
	"\n" +
	"## Example\n" +
	"```json\n" +
	"POST /acls/v1/mutate\n" +
	"{\n" +
	"  \"writes\": [\n" +
	"    {\n" +
	"      \"subject\": {\"type\": \"user\", \"id\": \"user123\"},\n" +
	"      \"resource\": {\"type\": \"document\", \"id\": \"doc123\"},\n" +
	"      \"relation\": {\"name\": \"can_read\"}\n" +
	"    }\n" +
	"  ],\n" +
	"  \"deletes\": [\n" +
	"    {\n" +
	"      \"subject\": {\"type\": \"user\", \"id\": \"user456\"},\n" +
	"      \"resource\": {\"type\": \"document\", \"id\": \"doc123\"},\n" +
	"      \"relation\": {\"name\": \"can_write\"}\n" +
	"    }\n" +
	"  ]\n" +
	"}\n" +
	"```JJ\n" +
	"\x03200\x12C\n" +
	"\x1dPermission mutation succeeded\x12\"\n" +
	" \x1a\x1e#/definitions/v1MutateResponse\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/acls/v1/mutate\x12\xeb\x01\n" +
	"\vStreamCheck\x12\x1e.aclgate.v1.StreamCheckRequest\x1a\x1f.aclgate.v1.StreamCheckResponse\"\x96\x01\x92A\x92\x01\n" +
	"\x15Permission Management\x12!Real-time permission check stream\x1aVStreams permission changes in real-time. Notifies immediately when permissions change.(\x010\x01\x12\xbb\x04\n" +
	"\rListResources\x12 .aclgate.v1.ListResourcesRequest\x1a!.aclgate.v1.ListResourcesResponse\"\xe4\x03\x92A\xc6\x03\n" +
	"\x15Permission Management\x12\x19List accessible resources\x1a\xc4\x02Lists all resources a subject can access with a specific relation.\n" +
	"\n" +
	"## Example\n" +
	"```\n" +
	"GET /acls/v1/resources?type=document&subject.type=user&subject.id=user123&relation.name=can_read\n" +
	"```\n" +
	"\n" +
	"## Response Example\n" +
	"```json\n" +
	"{\n" +
	"  \"resources\": [\n" +
	"    {\"type\": \"document\", \"id\": \"doc123\"},\n" +
	"    {\"type\": \"document\", \"id\": \"doc456\"}\n" +
	"  ]\n" +
	"}\n" +
	"```JK\n" +
	"\x03200\x12D\n" +
	"\x17Resource list succeeded\x12)\n" +
	"'\x1a%#/definitions/v1ListResourcesResponse\x82\xd3\xe4\x93\x02\x14\x12\x12/acls/v1/resources\x12\xb7\x04\n" +
	"\fListSubjects\x12\x1f.aclgate.v1.ListSubjectsRequest\x1a .aclgate.v1.ListSubjectsResponse\"\xe3\x03\x92A\xc6\x03\n" +
	"\x15Permission Management\x12\x19List subjects with access\x1a\xc6\x02Lists all subjects who can access a resource with a specific relation.\n" +
	"\n" +
	"## Example\n" +
	"```\n" +
	"GET /acls/v1/subjects?type=user&resource.type=document&resource.id=doc123&relation.name=can_read\n" +
	"```\n" +
	"\n" +
	"## Response Example\n" +
	"```json\n" +
	"{\n" +
	"  \"subjects\": [\n" +
	"    {\"type\": \"user\", \"id\": \"user123\"},\n" +
	"    {\"type\": \"group\", \"id\": \"admin-group\"}\n" +
	"  ]\n" +
	"}\n" +
	"```JI\n" +
	"\x03200\x12B\n" +
	"\x16Subject list succeeded\x12(\n" +
	"&\x1a$#/definitions/v1ListSubjectsResponse\x82\xd3\xe4\x93\x02\x13\x12\x11/acls/v1/subjects\x12\xfd\x05\n" +
	"\x05Audit\x12\x18.aclgate.v1.AuditRequest\x1a\x19.aclgate.v1.AuditResponse\"\xbe\x05\x92A\xa4\x05\n" +
	"\tAudit Log\x12\x10Query audit logs\x1a\xbd\x04Queries the history of permission changes for security audit and compliance.\n" +
	"\n" +
	"## Example\n" +
	"```\n" +
	"GET /acls/v1/audit?resource.type=document&resource.id=doc123&pageSize=10\n" +
	"```\n" +
	"\n" +
	"## Response Example\n" +
	"```json\n" +
	"{\n" +
	"  \"logs\": [\n" +
	"    {\n" +
	"      \"id\": \"audit123\",\n" +
	"      \"action\": \"WRITE\",\n" +
	"      \"tuple\": {\n" +
	"        \"subject\": {\"type\": \"user\", \"id\": \"admin\"},\n" +
	"        \"resource\": {\"type\": \"document\", \"id\": \"doc123\"},\n" +
	"        \"relation\": {\"name\": \"can_read\"}\n" +
	"      },\n" +
	"      \"actor\": \"admin\",\n" +
	"      \"timestamp\": \"2024-01-15T10:30:00Z\",\n" +
	"      \"reason\": \"Granted new user permission\"\n" +
	"    }\n" +
	"  ]\n" +
	"}\n" +
	"```JE\n" +
	"\x03200\x12>\n" +
	"\x19Audit log query succeeded\x12!\n" +
	"\x1f\x1a\x1d#/definitions/v1AuditResponse\x82\xd3\xe4\x93\x02\x10\x12\x0e/acls/v1/audit\x1ao\x92Al\x122Service for permission verification and management\x1a6\n" +
	"\x11GitHub Repository\x12!https://github.com/carped99/gosdkB\x89\x01\n" +
	"\x0ecom.aclgate.v1B\fServiceProtoP\x01Z aclgate/api/aclgate/v1;aclgatev1\xa2\x02\x03AXX\xaa\x02\n" +
	"Aclgate.V1\xca\x02\n" +
	"Aclgate\\V1\xe2\x02\x16Aclgate\\V1\\GPBMetadata\xea\x02\vAclgate::V1b\x06proto3"

var (
	file_aclgate_v1_service_proto_rawDescOnce sync.Once
	file_aclgate_v1_service_proto_rawDescData []byte
)

func file_aclgate_v1_service_proto_rawDescGZIP() []byte {
	file_aclgate_v1_service_proto_rawDescOnce.Do(func() {
		file_aclgate_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aclgate_v1_service_proto_rawDesc), len(file_aclgate_v1_service_proto_rawDesc)))
	})
	return file_aclgate_v1_service_proto_rawDescData
}

var file_aclgate_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_aclgate_v1_service_proto_goTypes = []any{
	(*CheckRequest)(nil),          // 0: aclgate.v1.CheckRequest
	(*CheckResponse)(nil),         // 1: aclgate.v1.CheckResponse
	(*BatchCheckRequest)(nil),     // 2: aclgate.v1.BatchCheckRequest
	(*BatchCheckResponse)(nil),    // 3: aclgate.v1.BatchCheckResponse
	(*BatchCheckResult)(nil),      // 4: aclgate.v1.BatchCheckResult
	(*MutateRequest)(nil),         // 5: aclgate.v1.MutateRequest
	(*MutateResponse)(nil),        // 6: aclgate.v1.MutateResponse
	(*StreamCheckRequest)(nil),    // 7: aclgate.v1.StreamCheckRequest
	(*StreamCheckResponse)(nil),   // 8: aclgate.v1.StreamCheckResponse
	(*ListResourcesRequest)(nil),  // 9: aclgate.v1.ListResourcesRequest
	(*ListResourcesResponse)(nil), // 10: aclgate.v1.ListResourcesResponse
	(*ListSubjectsRequest)(nil),   // 11: aclgate.v1.ListSubjectsRequest
	(*ListSubjectsResponse)(nil),  // 12: aclgate.v1.ListSubjectsResponse
	(*AuditRequest)(nil),          // 13: aclgate.v1.AuditRequest
	(*AuditLog)(nil),              // 14: aclgate.v1.AuditLog
	(*AuditResponse)(nil),         // 15: aclgate.v1.AuditResponse
	nil,                           // 16: aclgate.v1.StreamCheckRequest.ContextEntry
	(*Tuple)(nil),                 // 17: aclgate.v1.Tuple
	(*Subject)(nil),               // 18: aclgate.v1.Subject
	(*Relation)(nil),              // 19: aclgate.v1.Relation
	(*Resource)(nil),              // 20: aclgate.v1.Resource
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
}
var file_aclgate_v1_service_proto_depIdxs = []int32{
	17, // 0: aclgate.v1.CheckRequest.tuple:type_name -> aclgate.v1.Tuple
	0,  // 1: aclgate.v1.BatchCheckRequest.items:type_name -> aclgate.v1.CheckRequest
	4,  // 2: aclgate.v1.BatchCheckResponse.results:type_name -> aclgate.v1.BatchCheckResult
	0,  // 3: aclgate.v1.BatchCheckResult.request:type_name -> aclgate.v1.CheckRequest
	17, // 4: aclgate.v1.MutateRequest.writes:type_name -> aclgate.v1.Tuple
	17, // 5: aclgate.v1.MutateRequest.deletes:type_name -> aclgate.v1.Tuple
	17, // 6: aclgate.v1.StreamCheckRequest.tuple:type_name -> aclgate.v1.Tuple
	16, // 7: aclgate.v1.StreamCheckRequest.context:type_name -> aclgate.v1.StreamCheckRequest.ContextEntry
	18, // 8: aclgate.v1.ListResourcesRequest.subject:type_name -> aclgate.v1.Subject
	19, // 9: aclgate.v1.ListResourcesRequest.relation:type_name -> aclgate.v1.Relation
	20, // 10: aclgate.v1.ListResourcesResponse.resources:type_name -> aclgate.v1.Resource
	20, // 11: aclgate.v1.ListSubjectsRequest.resource:type_name -> aclgate.v1.Resource
	19, // 12: aclgate.v1.ListSubjectsRequest.relation:type_name -> aclgate.v1.Relation
	18, // 13: aclgate.v1.ListSubjectsResponse.subjects:type_name -> aclgate.v1.Subject
	20, // 14: aclgate.v1.AuditRequest.resource:type_name -> aclgate.v1.Resource
	18, // 15: aclgate.v1.AuditRequest.subject:type_name -> aclgate.v1.Subject
	19, // 16: aclgate.v1.AuditRequest.relation:type_name -> aclgate.v1.Relation
	17, // 17: aclgate.v1.AuditLog.tuple:type_name -> aclgate.v1.Tuple
	21, // 18: aclgate.v1.AuditLog.timestamp:type_name -> google.protobuf.Timestamp
	14, // 19: aclgate.v1.AuditResponse.logs:type_name -> aclgate.v1.AuditLog
	0,  // 20: aclgate.v1.AclGateService.Check:input_type -> aclgate.v1.CheckRequest
	2,  // 21: aclgate.v1.AclGateService.BatchCheck:input_type -> aclgate.v1.BatchCheckRequest
	5,  // 22: aclgate.v1.AclGateService.Mutate:input_type -> aclgate.v1.MutateRequest
	7,  // 23: aclgate.v1.AclGateService.StreamCheck:input_type -> aclgate.v1.StreamCheckRequest
	9,  // 24: aclgate.v1.AclGateService.ListResources:input_type -> aclgate.v1.ListResourcesRequest
	11, // 25: aclgate.v1.AclGateService.ListSubjects:input_type -> aclgate.v1.ListSubjectsRequest
	13, // 26: aclgate.v1.AclGateService.Audit:input_type -> aclgate.v1.AuditRequest
	1,  // 27: aclgate.v1.AclGateService.Check:output_type -> aclgate.v1.CheckResponse
	3,  // 28: aclgate.v1.AclGateService.BatchCheck:output_type -> aclgate.v1.BatchCheckResponse
	6,  // 29: aclgate.v1.AclGateService.Mutate:output_type -> aclgate.v1.MutateResponse
	8,  // 30: aclgate.v1.AclGateService.StreamCheck:output_type -> aclgate.v1.StreamCheckResponse
	10, // 31: aclgate.v1.AclGateService.ListResources:output_type -> aclgate.v1.ListResourcesResponse
	12, // 32: aclgate.v1.AclGateService.ListSubjects:output_type -> aclgate.v1.ListSubjectsResponse
	15, // 33: aclgate.v1.AclGateService.Audit:output_type -> aclgate.v1.AuditResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_aclgate_v1_service_proto_init() }
func file_aclgate_v1_service_proto_init() {
	if File_aclgate_v1_service_proto != nil {
		return
	}
	file_aclgate_v1_schema_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aclgate_v1_service_proto_rawDesc), len(file_aclgate_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aclgate_v1_service_proto_goTypes,
		DependencyIndexes: file_aclgate_v1_service_proto_depIdxs,
		MessageInfos:      file_aclgate_v1_service_proto_msgTypes,
	}.Build()
	File_aclgate_v1_service_proto = out.File
	file_aclgate_v1_service_proto_goTypes = nil
	file_aclgate_v1_service_proto_depIdxs = nil
}
